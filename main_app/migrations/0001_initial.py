# Generated by Django 5.1.4 on 2025-06-20 16:49

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Announsment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Заголовок')),
                ('text', models.TextField(max_length=500, verbose_name='Текст')),
            ],
            options={
                'verbose_name': 'Объявление',
                'verbose_name_plural': 'Объявления',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('tour_id', models.IntegerField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Номер турнира')),
                ('playing_groups_ids', models.JSONField(default=list, verbose_name='ID групп турнира')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата')),
                ('time_started', models.TimeField(default=django.utils.timezone.now, verbose_name='Время начала')),
                ('minutes_btwn_groups', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Перерыв между группами (мин)')),
                ('minutes_btwn_matches', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Перерыв между  матчами (мин)')),
                ('played_with_matrix', models.JSONField(default=list, verbose_name='Матрица встреч игроков')),
                ('isEnded', models.BooleanField(default=False, verbose_name='Турнир закончен')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
                'permissions': [('can_start_tour', 'Can start new tournament'), ('can_shift_timetable', 'Can shift timetable')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=200, verbose_name='ФИО')),
                ('email', models.CharField(max_length=100)),
                ('mobile_phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('gender', models.CharField(choices=[('M', 'мужской'), ('W', 'женский')], max_length=20, verbose_name='Пол')),
                ('age', models.IntegerField(null=True, verbose_name='Возраст')),
                ('category', models.CharField(blank=True, choices=[('новичок', 'новичок'), ('любитель', 'любитель'), ('III юношеский', 'III юношеский'), ('II юношеский', 'II юношеский'), ('I юношеский', 'I юношеский'), ('III спортивный', 'III спортивный'), ('II спортивный', 'II спортивный'), ('I спортивный', 'I спортивный'), ('КМС', 'КМС'), ('ГР', 'ГР'), ('МСМК', 'МСМК')], max_length=20, null=True, verbose_name='Уровень подготовки')),
                ('rating', models.IntegerField(default=0, null=True, verbose_name='Рейтинг')),
                ('previous_ratings', models.JSONField(default=list, verbose_name='Прошлые рейтинги')),
                ('role', models.CharField(blank=True, choices=[('forward', 'нападающий'), ('defender', 'защитник'), ('goalkeeper', 'вратарь')], max_length=20, null=True, verbose_name='Роль')),
                ('tg_chat_id', models.BigIntegerField(null=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
                'permissions': [('cant_reg_in_tour', 'Cannot register in tournament')],
            },
        ),
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('player_id', models.IntegerField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID игрока')),
                ('name', models.CharField(max_length=50, verbose_name='Имя')),
                ('role', models.CharField(choices=[('forward', 'нападающий'), ('defender', 'защитник'), ('goalkeeper', 'вратарь')], default='forward', max_length=20, verbose_name='Роль')),
                ('age', models.IntegerField(null=True, verbose_name='Возраст')),
                ('gender', models.CharField(choices=[('M', 'мужской'), ('W', 'женский')], default='M', max_length=20, verbose_name='Пол')),
                ('rating', models.IntegerField(null=True, verbose_name='Рейтинг')),
                ('start_rating', models.IntegerField(null=True)),
                ('group_id', models.IntegerField(blank=True, null=True, verbose_name='ID группы')),
                ('matches_played', models.IntegerField(default=0, verbose_name='Матчей сыграно')),
                ('goals_scored', models.IntegerField(default=0, verbose_name='Забитые')),
                ('goals_taken', models.IntegerField(default=0, verbose_name='Пропущенные')),
                ('banned', models.BooleanField(default=False, verbose_name='Исключен')),
                ('profile', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main_app.profile')),
            ],
            options={
                'verbose_name': 'Участник',
                'verbose_name_plural': 'Участники',
            },
        ),
        migrations.CreateModel(
            name='Micromatch',
            fields=[
                ('group_id', models.IntegerField(null=True, verbose_name='ID группы')),
                ('match_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID матча')),
                ('matchRating', models.IntegerField(verbose_name='Средний рейтинг')),
                ('players_ids', models.JSONField(default=list, verbose_name='ID игроков')),
                ('team1_players', models.JSONField(verbose_name='Команда 1')),
                ('team2_players', models.JSONField(verbose_name='Команда 2')),
                ('team1_score', models.IntegerField(default=0, verbose_name='Счет первой команды')),
                ('team2_score', models.IntegerField(default=0, verbose_name='Счет второй команды')),
                ('isPlayed', models.BooleanField(default=False, verbose_name='Матч сыгран')),
                ('start_time', models.TimeField(default=django.utils.timezone.now, verbose_name='Время начала')),
                ('field_num', models.IntegerField(default=1, verbose_name='Номер поля')),
                ('tournament', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='main_app.tournament')),
            ],
            options={
                'verbose_name': 'Микроматч',
                'verbose_name_plural': 'Микроматчи',
                'permissions': [('can_save_score', 'Can save match score'), ('can_generate_match', 'Can generate new match')],
            },
        ),
        migrations.CreateModel(
            name='TournamentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.IntegerField(verbose_name='ID группы')),
                ('group_age_pool', models.JSONField(default=tuple, verbose_name='Диапазон возраста')),
                ('age_spread', models.IntegerField(default=1, verbose_name='Разброс по возрасту в матче')),
                ('group_gender', models.CharField(max_length=20, verbose_name='Пол участников')),
                ('stopped_played', models.BooleanField(default=False, verbose_name='Закончила играть')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='main_app.tournament')),
            ],
            options={
                'verbose_name': 'Группа турнира',
                'verbose_name_plural': 'Группы турнира',
            },
        ),
    ]
